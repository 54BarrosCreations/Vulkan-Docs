// refBegin VkImportMemoryWin32HandleInfoNV - import Win32 memory created on the same physical device

To import memory created on the same physical device but outside of the
current Vulkan instance, add a slink:VkImportMemoryWin32HandleInfoNV
structure to the pname:pNext chain of the slink:VkMemoryAllocateInfo
structure, specifying a handle to and the type of the memory.

The sname:VkImportMemoryWin32HandleInfoNV structure is defined as:

include::../../api/structs/VkImportMemoryWin32HandleInfoNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:handleType is 0 or a flag specifying the type of memory handle in
    pname:handle.
    Flags which may: be specified are:
+
--
// refBegin VkExternalMemoryHandleTypeFlagBitsNV - Bitmask specifying memory handle types
include::../../api/enums/VkExternalMemoryHandleTypeFlagBitsNV.txt[]
--
  * pname:handle is a Windows code:HANDLE referring to the memory.
  ** if pname:handleType is
     ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV or
     ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
     pname:handle must: be a valid handle returned by
     flink:vkGetMemoryWin32HandleNV or, in the case of
     ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV, a handle
     duplicated from such a handle using `DuplicateHandle()`.
  ** if pname:handleType is
     ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV, pname:handle
     must: be a valid NT handle returned by
     `IDXGIResource1::ftext:CreateSharedHandle()` or a handle duplicated
     from such a handle using `DuplicateHandle()`.
  ** if pname:handleType is
     ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
     pname:handle must: be a valid handle returned by
     `IDXGIResource::GetSharedHandle()`.

include::../../validity/structs/VkImportMemoryWin32HandleInfoNV.txt[]
