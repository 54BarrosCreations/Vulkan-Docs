// Copyright (c) 2014-2016 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

vkAllocateDescriptorSets(3)
===========================

Name
----
vkAllocateDescriptorSets - Allocate one or more descriptor sets.

C Specification
---------------

// refBegin vkAllocateDescriptorSets Allocate one or more descriptor sets.

To allocate descriptor sets from a descriptor pool, call:

include::../api/protos/vkAllocateDescriptorSets.txt[]


Parameters
----------

  * pname:device is the logical device that owns the descriptor pool.
  * pname:pAllocateInfo is a pointer to an instance of the
    slink:VkDescriptorSetAllocateInfo structure describing parameters of the
    allocation.
  * pname:pDescriptorSets is a pointer to an array of sname:VkDescriptorSet
    handles in which the resulting descriptor set objects are returned. The
    array must: be at least the length specified by the
    pname:descriptorSetCount member of pname:pAllocateInfo.


Description
-----------

The allocated descriptor sets are returned in pname:pDescriptorSets.

When a descriptor set is allocated, the initial state is largely
uninitialized and all descriptors are undefined. However,
the descriptor set can: be bound
in a command buffer without causing errors or exceptions. All entries that
are statically used by a pipeline in a drawing or dispatching command must:
have been populated before the descriptor set is bound for use by that command.
Entries that are not statically used by a pipeline can: have uninitialized
descriptors or descriptors of resources that have been destroyed, and executing
a draw or dispatch with such a descriptor set bound does not cause undefined
behavior. This means applications need not populate unused entries with dummy
descriptors.

If an allocation fails due to fragmentation, an indeterminate error is
returned with an unspecified error code. Any returned error other than 
ename:VK_ERROR_FRAGMENTED_POOL does not imply its usual meaning:
applications should: assume that the allocation failed due to fragmentation,
and create a new descriptor pool.

[NOTE]
.Note
====
Applications should check for a negative return value when allocating new
descriptor sets, assume that any error effectively means
ename:VK_ERROR_FRAGMENTED_POOL, and try to create a new descriptor pool.
If ename:VK_ERROR_FRAGMENTED_POOL is the actual return value, it adds
certainty to that decision.

The reason for this is that ename:VK_ERROR_FRAGMENTED_POOL was only added in
a later revision of the 1.0 specification, and so drivers may: return other
errors if they were written against earlier revisions.
To ensure full compatibility with earlier patch revisions, these other
errors are allowed.
====

include::../validity/protos/vkAllocateDescriptorSets.txt[]


See Also
--------

slink:VkDescriptorSet, slink:VkDescriptorSetAllocateInfo, slink:VkDevice


Document Notes
--------------

For more information, see the Vulkan Specification at URL

https://www.khronos.org/registry/vulkan/specs/1.0/xhtml/vkspec.html#vkAllocateDescriptorSets

This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification,not directly.

include::footer.txt[]

